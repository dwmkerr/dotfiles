" Specify a directory for plugins
call plug#begin('~/.vim/plugins')

" Sensible vim configuration everyone can agree on.
Plug 'tpope/vim-sensible'

" Essential plugins for collaboration and style.
Plug 'editorconfig/editorconfig-vim' " Support editorconfig file.

" Plugins for colour schemes.
Plug 'altercation/vim-colors-solarized'
Plug 'joshdick/onedark.vim'
Plug 'rakr/vim-one'

Plug 'fatih/vim-go'        " Brutal Golang features
Plug 'scrooloose/nerdtree' " NerdTree is a tree view for vim.
Plug 'w0rp/ale'            " Asynchronous Linting Engine.
Plug 'vim-airline/vim-airline'    " A useful statusbar.
Plug 'sjl/vitality.vim'    " Nicer cursor, tmux interactions.
Plug 'tpope/vim-surround'  " Surround motions.
Plug 'tpope/vim-repeat'    " Allow the 'dot' for repeating even for plugins.
Plug 'mileszs/ack.vim'     " Ack support.
Plug 'christoomey/vim-tmux-navigator'

Plug 'rizzatti/dash.vim'   " Dash support.
Plug 'dhruvasagar/vim-table-mode' " Easily format tables on the fly with vim.
Plug 'tpope/vim-fugitive'  " Git support.
Plug 'neoclide/coc.nvim', {'branch': 'release'}   " Modern, LSP-based autocompletion.

" FZF Vim Integration. fzf-lua replaces vim.fzf.
Plug 'ibhagwan/fzf-lua', {'branch': 'main'}
Plug 'nvim-tree/nvim-web-devicons' " icon support for vim.fzf

" Plugins for languages.
" NOTE: many of these now are probably handled by vim-polyglot, so if having
" weird language issues always check to see if we just need to remove an old
" or conflicting plugin.
Plug 'sheerun/vim-polyglot'     " JS/TS/JSX/TSX, plus zillions more.
" Plug 'jparise/vim-graphql'      " GraphQL - causes errors so disabled
Plug 'PProvost/vim-ps1'         " PowerShell
Plug 'elzr/vim-json'            " As above.
Plug 'othree/html5.vim'         " HTML + SVG
Plug 'hashivim/vim-terraform'   " Adds suppport for terraform files (in fact HCP etc)
Plug 'cespare/vim-toml'         " TOML support
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' } " Python Docstrings
Plug 'delphinus/vim-firestore'  " Firestore rules syntax

" Plugins for JavaScript.
" Create JSDoc comments.
Plug 'heavenshell/vim-jsdoc', {
  \ 'for': ['javascript', 'javascript.jsx','typescript'],
  \ 'do': 'make install'
\}

" Plugins for Markdown
"   Note: language support is via vim-polyglot.
Plug 'mzlogin/vim-markdown-toc' " Build a TOC for markdown.
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" Plugins for writing with focus.
Plug 'junegunn/goyo.vim'        " Go into distraction free mode (:Gojo)
Plug 'junegunn/limelight.vim'   " Focus on the current paragraph only.

" Support focus events, even when running in tmux.
Plug 'tmux-plugins/vim-tmux-focus-events'

" Lots of mappings such as [<Space> ]<Space>.
Plug 'tpope/vim-unimpaired'

" Nice splitting / joining.
Plug 'AndrewRadev/splitjoin.vim'

" Line up text, e.g. :Tab /= to line up text on equals sign.
Plug 'godlygeek/tabular'

" Highlight the yanked text briefly.
" Plug 'machakann/vim-highlightedyank'

" NERD Commenter plugin.
Plug 'scrooloose/nerdcommenter'

" Initialize plugin system.
call plug#end()

" Disable vim-polygot for go as we use vim-go.
if exists('g:loaded_polyglot')
    let g:polyglot_disabled = ['go']
endif


" --- Simple Vim config.
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set colorcolumn=80      " highlight column 80

set hlsearch            " highlight matches

" Break bad habits - no arrow keys for cursor movement!
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" But arrow keys are OK to move between or control buffers.
map <right> :bn<cr>
map <left> :bp<cr>
map <up> :w<cr>
map <down> :bd<cr>

" Ctrl+c exits in the same way as Esc (including sending InsertLeave)
:imap jj <Esc>
:ino <C-c> <Esc>

" Tell search and other tools to ignore files that we don't want to search.
set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.*

" Word configuration.

    " Dashes are considered parts of a word for the purposes of motions, search
    " autocomplete, etc.
    " TODO: not sure I like this - word motions feel clunkier now so turning it off for a bit. 
    " set iskeyword+=-

" Pane configuration.

    " More natural (to me) splitting.
    set splitbelow
    set splitright

" Colour and terminal configuration.

    " If we have 24bit colour support, use it. Without this line we seem to get
    " the right colours *almost* - except the background!
    if (has("termguicolors"))
        set termguicolors
    endif

" Theme settings

    " Syntax highlighting on, dark background, onedark theme.
    syntax on
    set background=dark
    let g:onedark_color_overrides = {
    \ "comment_grey": { "gui": "#818998", "cterm": "170", "cterm16": "5" }
    \}
    " let g:onedark_terminal_italics=1
    colorscheme onedark

" Cursor Configuration
   set guicursor=n-c-v:block-nCursor,i-ci:ver100-iCursor-blinkon200-blinkoff150

" Enable the mouse. Also enable when in tmux.
set mouse=a
if !has('nvim')
  " Note that this config is not needed in Neovim.
  set ttymouse=xterm2
endif

" Use the system clipboard.
set clipboard=unnamed

" Enable saving backups (swapfiles) and store vim backups in a temp dir
" rather than the local dir.
set swapfile
set dir=~/tmp

" Wildmenu settings, provides much nicer tab completion for commands.
set wildmenu

" Plugin: NerdTree settings

    " Toggle NerdTree with Ctrl+N
    map <C-n> :NERDTreeToggle<CR>

    " Show or hide hidden files.
    let NERDTreeShowHidden=1

    " But still ignore some normally not needed files.
    let g:NERDTreeIgnore=['\.git$[[dir]]', 'node_modules$[[dir]]', '\.nyc_output$[[dir]]']

    " Ignore the files in our 'wildignore' settings (see higher up in the file).
    let NERDTreeRespectWildIgnore=1

    " Show the current file in NERDTree.
    map <leader>t :NERDTreeFind<cr>

" Plugin: Airline Settings

    " Show the buffers in the tabline.
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#neomake#enabled = 0

" Language Settings

    " Enable filetype detection, and enable filetype plugins and indent scripts.
    filetype on
    filetype plugin indent on

    " With vim-polyglot language config seems pretty out of the box, but
    " leaving the original here for reference.
    " All languages - no autocommenting on newlines, 4 spaces soft tabs + expand
    " au FileType * set fo-=c fo-=r fo-=o sw=4 sts=4 et
    " Language specific indentation.
    " au FileType html           setl ts=2 sw=2 sts=2 et
    " au FileType javascript     setl ts=2 sw=2 sts=2 et
    " au FileType javascript.jsx setl ts=2 sw=2 sts=2 et
    " au FileType typescript     setl ts=2 sw=2 sts=2 et
    " au FileType json           setl ts=2 sw=2 sts=2 et
    " au FileType ruby           setl ts=2 sw=2 sts=2 et
    " au FileType yaml           setl ts=2 sw=2 sts=2 et
    " au FileType terraform      setl ts=2 sw=2 sts=2 et
    " au FileType make           set noexpandtab shiftwidth=8 softtabstop=0 " makefiles must use tabs
    " au FileType sshconfig      setl ts=2 sw=2 sts=2 et

" Spell-checking settings

    " Keep the spellfile in the homedir. This will be a symlink to the dotfiles
    " version of the spellfile.
    set spellfile=$HOME/.vim-spell-en.utf-8.add

    " Spell check markdown and git commit messages.
    autocmd FileType markdown setlocal spell
    autocmd FileType gitcommit setlocal spell

    " For filetypes with spellcheck available, we'll also support auto-complete.
    set complete+=kspell

    " Don't count acronyms / abbreviations as spelling errors
    " (all upper-case letters, at least three characters)
    " Also will not count acronym with 's' at the end a spelling error
    " Also will not count numbers that are part of this
    " Recognizes the following as correct:
    au BufNewFile,BufRead syn match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell
    au BufNewFile,BufRead syn match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell

" JavaScript Language Settings

    " Support JSX syntax highlighting in *.js, not just *.jsx.
    let g:jsx_ext_required = 0

    " Disable syntax concealing for json files.
    let g:vim_json_syntax_conceal = 0

    " A number of tools allow for comments in JSON files. This line adds comment
    " highlighting in JSON.
    autocmd FileType json syntax match Comment +\/\/.\+$+


" Ruby Language Settings

    " 'Fastlane' file types are ruby files.
    au BufNewFile,BufRead Appfile set ft=ruby
    au BufNewFile,BufRead Deliverfile set ft=ruby
    au BufNewFile,BufRead Fastfile set ft=ruby
    au BufNewFile,BufRead Gymfile set ft=ruby
    au BufNewFile,BufRead Matchfile set ft=ruby
    au BufNewFile,BufRead Snapfile set ft=ruby
    au BufNewFile,BufRead Scanfile set ft=ruby

" Nginx Language Settings

    " *.conf already configured by default, adding *.template.conf
    au BufRead,BufNewFile *.conf.template set ft=nginx

" Go Language Settings

    " Lots of syntax highlighting!
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1

    " Show type info.
    " let g:go_auto_type_info = 1

    " Don't format on save for now, cause I prefer to fix my own errors as I am
    " still learning.
    let g:go_fmt_autosave = 0
    let g:go_mod_fmt_autosave = 0

" Markdown language settings

    " For vim-markdown-toc set the indent to '-' rather than '*'. Hyphens
    " seem to be more standard (e.g. that's what 'prettier' uses).
    let g:vmt_list_item_char = '-'

    " I don't find the folding particularly useful, turn it off.
    let g:vim_markdown_folding_disabled = 1

    " Format YAML frontmatter properly.
    let g:vim_markdown_frontmatter = 1

    " I tend to indent lists with two spaces, rather than the four
    " which is the default.
    let g:vim_markdown_auto_insert_bullets = 0
    let g:vim_markdown_new_list_item_indent = 0

    " vim-table-mode - use Markdown table.
    let g:table_mode_corner='|'

" Python Language Settings

    " I tend to use google style docstrings.
    let g:pydocstring_formatter = 'google'

    " The default mapping for Pydocstring is C-l, which interferes with how I
    " navigate splits. Instead, use C-_.
    " Note that pydocstring seems to work very inconsistently and might be better
    " removed.
    nmap <silent> <C-_> <Plug>(pydocstring)

    " Allow setting of classes to None, e.g. 'Thread' to 'None', rather than
    " demanding 'Optional'. Note however that it may be more correct to simply
    " be more strict with code!
    let g:ale_python_mypy_options = '--no-strict-optional'

" Template settings

    " When we have templates, try and use the 'base' type for the syntax, e.g.
    " *.yaml.tpl uses the yaml type.
    autocmd BufNewFile,BufRead *.yml.tpl set syntax=yaml
    autocmd BufNewFile,BufRead *.yaml.tpl set syntax=yaml

" Line Number Configuration

    " By default, use hybrid line numbers (i.e. relative numbers, with the
    " current line shown as the _actual_ line number (not zero).
    set number relativenumber

    " This group of autocommands automatically toggles to use normal line
    " numbers on insert mode and hybrid on visual. It also handles switching
    " if we lose or gain focus.
    " We put these autocommands in an autocommand group so that we can turn off
    " this behaviour in its entirity if we need to (such as when we enter focus
    " mode).
    augroup auto_toggle_relative_linenumbers
        autocmd FocusLost * :set number norelativenumber
        autocmd FocusGained * :set number relativenumber
        autocmd InsertEnter * :set number norelativenumber
        autocmd InsertLeave * :set number relativenumber
    augroup end

" Map leader s to save.
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>

" Splitjoin Plugin
" Remember it like this: 's' for 'split', j splits down, k up.
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

" I comment with two spaces, ever since some old programming book I read did
" it like this. We also want multi line comments to have the comment symbols
" flush to the left, otherwise we tend to get linting errors.
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

noremap <leader><leader> :tabnew %<cr>

" When in insert mode, highlight the current line.
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

" ALE Configuration.

    " When a 'prettierrc' config is present, use it:
    " https://prettier.io/docs/en/vim.html#alehttpsgithubcomdense-analysisale

    " Use prettier for JS/CSS.
    let g:ale_fixers = {
    \   'javascript': ['prettier'],
    \   'javascriptreact': ['eslint'],
    \   'typescript': ['eslint'],
    \   'typescriptreact': ['eslint'],
    \   'css': ['prettier'],
    \}

    " Reduce the risk of bad commits by linting on save.
    " Note: disabled as it's quite aggressive with golang.
    " Note: re-enabling to test on typescript
    let g:ale_fix_on_save = 1

" Plugin: JSDoc Settings
  " Map '<Leader>j' to jsdoc on function we are currently in.
  nmap <silent> <Leader>j ?function<cr>:noh<cr><Plug>(jsdoc)

" fzf-lua configuration. Only works for NeoVim.
if has('nvim')
    let g:vimsyn_embed = 'lPr'  " support embedded lua, python and ruby
    " Heredoc highlighting
    lua <<EOF
        if vim.fn.executable("rg") ~= 1 then
            vim.notify("Please install 'ripgrep' for faster searching...", vim.log.levels.WARN)
        end
        vim.api.nvim_set_keymap("n", "<C-space>", [[<Cmd>lua require"fzf-lua".buffers()<CR>]], {})
        vim.api.nvim_set_keymap("n", "<C-k>", [[<Cmd>lua require"fzf-lua".builtin()<CR>]], {})
        vim.api.nvim_set_keymap("n", "<C-p>", [[<Cmd>lua require"fzf-lua".files()<CR>]], {})
        vim.api.nvim_set_keymap("n", "<C-m>", [[<Cmd>lua require"fzf-lua".live_grep_glob()<CR>]], {})
        vim.api.nvim_set_keymap("n", "<C-g>", [[<Cmd>lua require"fzf-lua".grep_project()<CR>]], {})
        vim.api.nvim_set_keymap("n", "<F1>", [[<Cmd>lua require"fzf-lua".help_tags()<CR>]], {})

        require("fzf-lua").utils.info(
        "|<C-space> buffers|<C-p> files|<C-g> grep|<C-m> live grep|<C-k> builtin|<F1> help|")

        --  Set fzf-lua options.
        local fzf = require('fzf-lua')
        -- e.g:
        -- fzf.setup({
        --  files = {
        --    rg_opts = "--color=always --smart-case -g '!{.git,node_modules}/'",
        --  },
        --})
EOF
endif

" The Silver Searcher (ag) Configuration.

    " Is 'ag' available?
    if executable('ag')
        " For grep, use ag.
        set grepprg=ag\ --nogroup\ --nocolor
    endif

" Ack Plugin Configuration

    " Use ag, rather than ack (sorry, I need my .gitignore to be used...).
    let g:ackprg = 'ag --nogroup --nocolor --column --path-to-ignore ~/.ignore'

    " Leader a to quickly get ready to ack. Ack! is used - the bang means "don't
    " open the first result automatically".
    :noremap <Leader>a :Ack!

" Leader d to open in Dash.
:nmap <silent> <leader>d <Plug>DashSearch

" Use persistent undo.
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif
set undodir=~/.vim/undo
set undofile

" NOTE: Experimental COC configuration.
            
            " For Python code, we can find the 'workspace' root with a pylint
            " or setup.cfg file. This helps if we have a monorepo with many
            " python projects in subfolders.
            autocmd FileType python let b:coc_root_patterns = [".git", ".hg", ".projections.json", ".pylintrc", "setup.cfg"]

            " if hidden is not set, TextEdit might fail.
            set hidden

            " Some servers have issues with backup files, see #649.
            set nobackup
            set nowritebackup

            " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
            " delays and poor user experience.
            set updatetime=300

            " Always show the signcolumn, otherwise it would shift the text each time
            " diagnostics appear/become resolved.
            set signcolumn=yes

            " Important: This took a while to get right - the documentation for
            " COC suggests some tab options that use tab/s-tab to cycle through
            " results. The behaviour below, from:
            " https://stackoverflow.com/questions/63337283/how-to-select-first-item-in-popup-menu-and-close-menu-in-a-single-keybind-for-au
            " is essentially 'what you'd get in VS Code'. Tab selects the first
            " item in the list. Then use C-P,C-N (prev/next) to cycle.
            inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<C-g>u\<TAB>"

            " inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
            " inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

            " function! s:check_back_space() abort
            "   let col = col('.') - 1
            "   return !col || getline('.')[col - 1]  =~# '\s'
            " endfunction

            " Use `[g` and `]g` to navigate diagnostics
            " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
            nmap <silent> [g <Plug>(coc-diagnostic-prev)
            nmap <silent> ]g <Plug>(coc-diagnostic-next)

            " GoTo code navigation.
            nmap <silent> gd <Plug>(coc-definition)
            nmap <silent> gy <Plug>(coc-type-definition)
            nmap <silent> gi <Plug>(coc-implementation)
            nmap <silent> gr <Plug>(coc-references)

            " Use K to show documentation in preview window.
            nnoremap <silent> K :call ShowDocumentation()<CR>

            function! ShowDocumentation()
              if CocAction('hasProvider', 'hover')
                call CocActionAsync('doHover')
              else
                call feedkeys('K', 'in')
              endif
            endfunction

            " Highlight the symbol and its references when holding the cursor.
            autocmd CursorHold * silent call CocActionAsync('highlight')

            " Symbol renaming.
            nmap <leader>rn <Plug>(coc-rename)

            " Formatting selected code.
            xmap <leader>f  <Plug>(coc-format-selected)
            nmap <leader>f  <Plug>(coc-format-selected)

            augroup mygroup
              autocmd!
              " Setup formatexpr specified filetype(s).
              autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
              " Update signature help on jump placeholder.
              autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
            augroup end

            " Applying codeAction to the selected region.
            " Example: `<leader>aap` for current paragraph
            xmap <leader>A  <Plug>(coc-codeaction-selected)
            nmap <leader>A  <Plug>(coc-codeaction-selected)

            " Remap keys for applying codeAction to the current buffer.
            nmap <leader>Ac  <Plug>(coc-codeaction)
            " Apply AutoFix to problem on the current line.
            nmap <leader>qf  <Plug>(coc-fix-current)

            " Run the Code Lens action on the current line.
            nmap <leader>cl  <Plug>(coc-codelens-action)

            " Map function and class text objects
            " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
            xmap if <Plug>(coc-funcobj-i)
            omap if <Plug>(coc-funcobj-i)
            xmap af <Plug>(coc-funcobj-a)
            omap af <Plug>(coc-funcobj-a)
            xmap ic <Plug>(coc-classobj-i)
            omap ic <Plug>(coc-classobj-i)
            xmap ac <Plug>(coc-classobj-a)
            omap ac <Plug>(coc-classobj-a)

            " Remap <C-f> and <C-b> for scroll float windows/popups.
            " TODO: currently conflicts with vim fzf
            " if has('nvim-0.4.0') || has('patch-8.2.0750')
            "   nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            "   nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            "   inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
            "   inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
            "   vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            "   vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            " endif

            " Use CTRL-S for selections ranges.
            " Requires 'textDocument/selectionRange' support of language server.
            nmap <silent> <C-s> <Plug>(coc-range-select)
            xmap <silent> <C-s> <Plug>(coc-range-select)

            " Add `:Format` command to format current buffer.
            command! -nargs=0 Format :call CocActionAsync('format')

            " Add `:Fold` command to fold current buffer.
            command! -nargs=? Fold :call     CocAction('fold', <f-args>)

            " Add `:OR` command for organize imports of the current buffer.
            command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

            " Add (Neo)Vim's native statusline support.
            " NOTE: Please see `:h coc-status` for integrations with external plugins that
            " provide custom statusline: lightline.vim, vim-airline.
            set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

            " Mappings for CoCList
            " Show all diagnostics.
            nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
            " Manage extensions.
            nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
            " Show commands.
            nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
            " Find symbol of current document.
            nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
            " Search workspace symbols.
            nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
            " Do default action for next item.
            nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
            " Do default action for previous item.
            nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
            " Resume latest coc list.
            nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

map <leader>F :Goyo<cr>

function! s:goyo_enter()
  " Zoom in and hide tmux status if we are in tmux.
  if executable('tmux') && strlen($TMUX)
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif
  " Hide the mode and command.
  set noshowmode
  set noshowcmd

  " Disable automatically changing line number mode (otherwise line numbers
  " come back when we go into/outof focus).
  autocmd! auto_toggle_relative_linenumbers

  " Start limelight.
  Limelight 0.8
endfunction

function! s:goyo_leave()
  " Zoom out and hide tmux status if we are in tmux.
  if executable('tmux') && strlen($TMUX)
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif
  " Show the mode and command.
  set showmode
  set showcmd

  " Disable automatically changing line number mode (otherwise line numbers
  " come back when we go into/outof focus).
  autocmd! auto_toggle_relative_linenumbers

  " Stop limelight.
  Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

